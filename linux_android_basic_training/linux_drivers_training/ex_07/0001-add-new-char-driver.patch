From e7e8d4a488debb410ad85456eacc49d9e241f100 Mon Sep 17 00:00:00 2001
From: sias <327272367@qq.com>
Date: Fri, 31 Aug 2012 23:37:28 +0800
Subject: [PATCH] add new char driver.

---
 build_android.sh                                   |    2 +-
 kernel_imx/arch/arm/configs/imx5_android_defconfig |    2 +
 kernel_imx/drivers/char/Kconfig                    |   14 ++-
 kernel_imx/drivers/char/Makefile                   |    4 +-
 kernel_imx/drivers/char/char_ioctl.c               |  181 ++++++++++++++++++++
 kernel_imx/drivers/char/misc_test.c                |  119 +++++++++++++
 .../host/os/linux/ar6000.mod.c                     |    5 -
 7 files changed, 317 insertions(+), 10 deletions(-)
 create mode 100755 kernel_imx/drivers/char/char_ioctl.c
 create mode 100755 kernel_imx/drivers/char/misc_test.c

diff --git a/build_android.sh b/build_android.sh
index 7c44c0a..73a3133 100755
--- a/build_android.sh
+++ b/build_android.sh
@@ -5,7 +5,7 @@ export ARCH=arm
 export CROSS_COMPILE=$current_dir/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin/arm-eabi- 
 #make PRODUCT-imx51_bbg-eng 2>&1 | tee build_imx51_bbg_android.log
 source build/envsetup.sh
-lunch imx51_bbg-user
+lunch imx51_bbg-eng
 make
 
 $current_dir/bootable/bootloader/uboot-imx/tools/mkimage -A arm -O linux -T ramdisk -C none -a 0x90308000 -n "Android Root Filesystem" -d $current_dir/out/target/product/imx51_bbg/ramdisk.img $current_dir/out/target/product/imx51_bbg/uramdisk.img
diff --git a/kernel_imx/arch/arm/configs/imx5_android_defconfig b/kernel_imx/arch/arm/configs/imx5_android_defconfig
index 914aa80..f9869bb 100644
--- a/kernel_imx/arch/arm/configs/imx5_android_defconfig
+++ b/kernel_imx/arch/arm/configs/imx5_android_defconfig
@@ -4,6 +4,8 @@
 # Mon Nov  7 19:20:46 2011
 
 #
+CONFIG_MISC_TEST=y
+CONFIG_CHAR_IOCTL=y
 CONFIG_ARM=y
 CONFIG_HAVE_PWM=y
 CONFIG_SYS_SUPPORTS_APM_EMULATION=y
diff --git a/kernel_imx/drivers/char/Kconfig b/kernel_imx/drivers/char/Kconfig
index 1ec263f..7963110 100644
--- a/kernel_imx/drivers/char/Kconfig
+++ b/kernel_imx/drivers/char/Kconfig
@@ -1,9 +1,17 @@
 #
-# Character device configuration
-#
 
-menu "Character devices"
+menu "Character Devices"
+
+config CHAR_IOCTL
+        bool "Char Ioctl Driver"
+        help
+                Char ioctl driver for !S390
 
+config MISC_TEST
+	bool "misc_test device support"
+	help
+		misc test function
+		
 config VT
 	bool "Virtual terminal" if EMBEDDED
 	depends on !S390
diff --git a/kernel_imx/drivers/char/Makefile b/kernel_imx/drivers/char/Makefile
index e7659d6..257aa26 100644
--- a/kernel_imx/drivers/char/Makefile
+++ b/kernel_imx/drivers/char/Makefile
@@ -5,10 +5,13 @@
 #
 # This file contains the font map for the default (hardware) font
 #
+obj-$(CONFIG_MISC_TEST)	+=misc_test.o
+obj-$(CONFIG_CHAR_IOCTL) +=char_ioctl.o
 FONTMAPFILE = cp437.uni
 
 obj-y	 += mem.o random.o tty_io.o n_tty.o tty_ioctl.o tty_ldisc.o tty_buffer.o tty_port.o
 
+
 obj-$(CONFIG_FM_SI4702)		+= mxc_si4702.o
 obj-$(CONFIG_MXC_IIM)		+= mxc_iim.o
 obj-$(CONFIG_MXS_VIIM)		+= mxs_viim.o
@@ -121,7 +124,6 @@ obj-$(CONFIG_JS_RTC)		+= js-rtc.o
 obj-y +=wis_led.o
 
 js-rtc-y = rtc.o
-
 # Files generated that shall be removed upon make clean
 clean-files := consolemap_deftbl.c defkeymap.c
 
diff --git a/kernel_imx/drivers/char/char_ioctl.c b/kernel_imx/drivers/char/char_ioctl.c
new file mode 100755
index 0000000..f11ab54
--- /dev/null
+++ b/kernel_imx/drivers/char/char_ioctl.c
@@ -0,0 +1,181 @@
+/*
+file name:char_ioctl.c
+purpose:char device driver
+creator:Bruse
+create time:2012-08-07
+modify history:
+Bruse li,2012-08-08
+*/
+#include<linux/module.h>
+#include<linux/fs.h>
+#include<linux/mm.h>
+#include<linux/types.h>
+#include<linux/init.h>
+#include<linux/cdev.h>
+#include<linux/sched.h>
+#include<linux/errno.h>
+#include<linux/slab.h>
+#include<asm/io.h>
+#include<asm/system.h>
+#include<asm/uaccess.h>
+#include<linux/device.h>  /*device_create,class_create*/
+#include<linux/slab.h>
+#include<linux/poll.h>
+#define RANGE 1024
+#define DEVICE_NAME  "create_ioctl"//定义设备名
+#define DEVICE_MAJOR  57    //手动定义设备的主设备号
+#define DEVICE_MINOR  0     //定义次设备号
+#define CHARDEV_IOC_MAGIC 'k'
+#define IOCTL_CHARDEV_IOCPRINT _IO(CHARDEV_IOC_MAGIC,1)
+#define IOCTL_CHAR_READ  _IOR(CHARDEV_IOC_MAGIC,1,int)
+#define IOCTL_CHAR_WRITE _IOW(CHARDEV_IOC_MAGIC,3,int)
+#define CHARDEV_IOC_MAXNR 3
+static int chardev_major = DEVICE_MAJOR ;
+static int chardev_minor =DEVICE_MINOR;
+
+// 设备结构体
+struct chardev_dev
+{
+       struct cdev cdev;
+       unsigned char str[RANGE];
+};
+static struct chardev_dev *chardev_devp;
+static struct chardev_dev dev;
+static struct class *simple_class;
+int chardev_open(struct inode *inode,struct file *filp)
+{
+	filp->private_data=chardev_devp;
+        return 0;
+}
+int chardev_release(struct inode *inode,struct file *filp)
+{
+        return 0;
+}
+ssize_t chardev_read(struct file *filp,char *buff,size_t size,loff_t *offp)
+{
+	unsigned long p =*offp;
+	unsigned int count=size;
+	int ret=0;
+	struct chardev_dev *dev =filp->private_data;/*获得设备结构提指针*/
+	if( p >= RANGE)
+		return 0;
+	if(count>RANGE-p)
+		count = RANGE - p;
+	if(copy_to_user(buff,(void *)(dev->str+p),count)){
+		ret = -EFAULT;
+		printk(KERN_ALERT "something done\n");
+	}else {
+		*offp +=count;
+		ret =count;
+		printk(KERN_INFO "read %u byte(s)from %lu\n",count,p);
+	}
+	return ret;	
+	
+}
+//I/O控制函数
+long chardev_ioctl(struct file *filp,unsigned int cmd,unsigned long arg)
+{
+	int ret=0;
+	int ioarg=0;
+	switch(cmd)
+	{	
+		case IOCTL_CHARDEV_IOCPRINT:
+			printk(" cmd chardev_iocprint done\n");
+			break;
+		case IOCTL_CHAR_READ:
+			printk("cmd put_user\n");
+			ioarg=110;
+			ret=__put_user(ioarg,(int *)arg);
+			break;
+		case IOCTL_CHAR_WRITE:
+			ret=__get_user(ioarg,(int *)arg);
+			break;
+		default:
+			return -EINVAL;
+	}
+		return ret;
+}	
+
+ssize_t chardev_write(struct file *filp,const char *buff,size_t size,loff_t *offp)
+{
+	unsigned long p =*offp;
+	unsigned int count=size;
+	int ret=0;
+	struct chardev_dev *dev=filp->private_data;
+	if(p>RANGE)
+		return 0;
+	if(count>RANGE-p)
+		count=RANGE-p;
+	if(copy_from_user(dev->str+p,buff,count)){
+		ret =-EFAULT;
+	}else {
+		*offp += count;
+		ret =count;
+		printk(KERN_INFO "write %u byte",count);
+	}
+	return ret;
+
+
+}
+/*初始化file_operatioms结构*/
+static struct file_operations chardev_fops = {
+	.owner = THIS_MODULE,
+	.open = chardev_open,
+	.release  = chardev_release,
+	.read = chardev_read,
+	.unlocked_ioctl=chardev_ioctl,
+	.write = chardev_write,
+};
+
+/*设备驱动加载模块*/
+static int chardev_init(void)
+{      
+	int result=0;
+	int err =0;
+	//分配设备号	
+	dev_t devno = MKDEV(chardev_major,chardev_minor);  
+	if(chardev_major)   
+		result = register_chrdev_region(devno,1,DEVICE_NAME); 
+	else
+	{   
+		result = alloc_chrdev_region(&devno ,chardev_minor ,1,DEVICE_NAME);
+		chardev_major = MAJOR(devno);
+	}
+	if(result < 0)
+		return result;
+	//分配设备结构体空间
+	chardev_devp=kmalloc(sizeof(struct chardev_dev),GFP_KERNEL);
+	memset(chardev_devp,0,sizeof(struct chardev_dev));	
+	//注册设备
+	devno = MKDEV (chardev_major,chardev_minor);
+	cdev_init(&dev.cdev,&chardev_fops);
+	dev.cdev.owner = THIS_MODULE; 
+	dev.cdev.ops = &chardev_fops;  //建立设备文件操作与系统调用之间的连接
+	err = cdev_add(&dev.cdev,devno,1);  //向系统添加该设备
+     
+	if(err)
+	{
+		printk("Error %d ",err);
+	}
+	//自动在/DEV下创建节点
+	simple_class=class_create(THIS_MODULE,DEVICE_NAME);
+	if(IS_ERR(simple_class)){
+		printk("ERR:cannot creat a simple class");
+	}
+	device_create(simple_class,NULL,MKDEV(chardev_major,chardev_minor),NULL,DEVICE_NAME);
+		printk("Have Created an inode under dev\n");
+		return 0;
+}
+//设备驱动卸载模块
+static void chardev_exit(void)
+{
+	device_destroy(simple_class,MKDEV(chardev_major,chardev_minor));
+	class_destroy(simple_class);
+	cdev_del(&dev.cdev);
+	kfree(chardev_devp); 
+	unregister_chrdev_region(MKDEV(chardev_major,chardev_minor),1);  //释放设备号
+}
+module_init(chardev_init);
+module_exit(chardev_exit);
+MODULE_AUTHOR("Bruse");
+MODULE_LICENSE("Dual BSD/GPL");
diff --git a/kernel_imx/drivers/char/misc_test.c b/kernel_imx/drivers/char/misc_test.c
new file mode 100755
index 0000000..725bd96
--- /dev/null
+++ b/kernel_imx/drivers/char/misc_test.c
@@ -0,0 +1,119 @@
+/*
+file name:misc_driver.c
+purpose:misc device driver
+creator:Bruse li
+create time:2012-08-02
+modify history:
+Bruse li,2012-08-06
+*/
+#include<linux/miscdevice.h>
+#include<linux/module.h>
+#include<linux/fs.h>
+#include<linux/mm.h>
+#include<linux/types.h>
+#include<linux/init.h>
+#include<linux/cdev.h>
+#include<linux/sched.h>
+#include<linux/errno.h>
+#include<linux/slab.h>
+#include<asm/io.h>
+#include<asm/system.h>
+#include<asm/uaccess.h>
+#define RANGE 1024
+#define MISC_NAME  "misc_err"//定义设备名
+
+//设置设备结构体
+struct chardev_dev
+{
+	struct cdev cdev;
+	unsigned char str[RANGE];
+};
+static struct chardev_dev *chardev_devp;
+int open(struct inode *inode,struct file *filp)
+{
+	filp->private_data=chardev_devp;
+	return 0;
+}
+int release(struct inode *inode,struct file *filp)
+{
+	return 0;
+}
+ssize_t read(struct file *filp,char *buff,size_t size,loff_t *offp)
+{
+	unsigned long p =*offp;
+	unsigned int count=size;
+	int ret=0;
+	struct chardev_dev *dev =filp->private_data;//获得设备结构体指针
+	if( p >= RANGE)
+		return 0;
+	if(count>RANGE-p)
+		count = RANGE - p;
+	if(copy_to_user(buff,(void *)(dev->str+p),count)){
+		ret = -EFAULT;
+		printk(KERN_ALERT "something done\n");
+	}else {
+		*offp +=count;
+		ret =count;
+		printk(KERN_INFO "read %u byte(s)from %lu\n",count,p);
+	}
+	return ret;		
+}
+
+ssize_t write(struct file *filp,const char *buff,size_t size,loff_t *offp)
+{
+	unsigned long p =*offp;
+	unsigned int count=size;
+	int ret=0;
+	struct chardev_dev *dev=filp->private_data;
+	if(p>RANGE)
+		return 0;
+	if(count>RANGE-p)
+		count=RANGE-p;
+	if(copy_from_user(dev->str+p,buff,count)){
+		ret =-EFAULT;
+	}else {
+		*offp += count;
+		ret =count;
+		printk(KERN_INFO "write %u byte",count);
+	}
+	return ret;
+}
+
+static struct file_operations misc_fops = {
+	.owner = THIS_MODULE,
+	.open = open,
+	.release  = release,
+	.read =read,
+	.write = write,
+};
+
+static struct miscdevice misc_dev =
+{	
+	.minor = MISC_DYNAMIC_MINOR,//次设备号
+	.name = MISC_NAME,//设备名
+	.fops = &misc_fops,
+};
+
+//设备驱动加载模块
+static int chardev_init(void)
+{      
+	int ret=0;
+	chardev_devp=kmalloc(sizeof(struct chardev_dev),GFP_KERNEL);
+	memset(chardev_devp,0,sizeof(struct chardev_dev));
+	ret = misc_register(&misc_dev);
+	if (ret)
+	{
+		printk("misc_register error\n");
+		return ret;
+	}
+ 
+	return ret;
+}
+static void chardev_exit(void)
+{	 
+	kfree(chardev_devp);
+	misc_deregister(&misc_dev);
+}
+module_init(chardev_init);
+module_exit(chardev_exit);
+MODULE_LICENSE("Dual BSD/GPL");
